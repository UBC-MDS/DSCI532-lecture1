---
title: "Introduction"
institute: "Data Visualization II - DSCI 532 - MDS 2022/23"
format:
  revealjs:
    logo: img/mdslogo.png
    incremental: true  # bullets one by one 
    smaller: true
    scrollable: true
    theme: custom.scss
    slide-number: true
    show-slide-number: print
    chalkboard: true
    multiplex: true
---

## DSCI 532 Overview    

![](img/532.png)
---

## Lecture 1 
  

1. What is a **data dashboard**?  

  
2. Which are the main **components of a Shiny App**?  

  
3. What is **reactivity** and how to implement it?


---
  
## üôå **Today's goal**
### Create and Deploy a basic Shiny App.

**DEMOS:**  
- Running a dashboard vs running code    
- Building the structure of your first Shiny app      
- Creating a reactive plot with Shiny and deploying it    

---

## Lecture 1 Overview

1. What is a **data dashboard**?  
DEMO - Running a dashboard vs running code  
  
2. Which are the main **components of a Shiny App**?  
DEMO - Building the structure of your first Shiny app   
  
3. What is **reactivity** and how to implement it?
DEMO - Creating a reactive plot with Shiny and deploying it  

---

## Material
  

      
- üìö Chapter 1 - [Your first Shiny app](https://mastering-shiny.org/basic-app.html) -  
Mastering Shiny 

---

# 1. What is a **data dashboard**? {background-color="#F1FFFA"}


---

## Which one is a dashboard?

::: {#fig-elephants layout-ncol=2 fig-align='center'}

![](img/dashboard1.png){#fig-surus}

![](img/dashboard2.png){#fig-hanno}

Which one is a Dashboard?
:::

:::footer
[Dahsboard 1](https://experience.arcgis.com/experience/a6f23959a8b14bfa989e3cda29297ded) - [Dahsboard 2](https://experience.arcgis.com/experience/a6f23959a8b14bfa989e3cda29297ded)
:::

---

## Answer

Option (a) is correct
- Dashboards use to have widgets that allow the user interact with the interface, what made them similar to web apps. 
- Dashboards are specifically designed to display and monitor data.

---

## What is a data dashboard?

> An **information management tool** that visually tracks, analyzes, and displays key performance indicators, metrics, as well as key data points, allowing you to monitor the current state of your business, department, team, or specific process.


::: footer
[One source: Databox](https://databox.com/what-is-a-dashboard#what)]
:::

---

## Packages / technologies used to create Dashboads


![](img/tech.png)
---

## Tableau and Power BI

![Tableau](img/tableau-1.png){width=500 fig-align="center"} 

- drag and drop GUI interface (not coding!)
- easier to implement but allows less customization


::: footer

[Power BI vs Shiny - Appsilon blog](https://appsilon.com/powerbi-vs-r-shiny/)
:::

---

## Comparison

![](img/dashboard-comparison.png){fig-align="center"}

::: footer
[Streamlit vs. Dash vs. Shiny vs. Voila vs. Flask vs. Jupyter - by Markus Schmitt](https://www.datarevenue.com/en-blog/data-dashboarding-streamlit-vs-dash-vs-shiny-vs-voila)
:::


---

## Criteria to select the best available solution
1. short-term or long-term solution?
2. cost / financial aspect
3. data arquitecture - Is compatible with other technology that I am using?

::: footer
Extracted from: Business Dashboards
:::

---

## Criteria to select the best available solution
4. Ease of use
5. Software maturity
6. Features and flexibility
7. Hardware requirements

::: footer
Extracted from: Business Dashboards
:::


---

## What will we learn in DSCI 532?
- **[R]** Shiny  
- **[Python]** Dash

Both are open source packages

::: footer
New! [Shiny for python](https://shiny.rstudio.com/py/)
:::


---

## Why Shiny? ‚ú®

  
**Mature web app framework**    
  
- Special packages for testing the app are available (`Shinytest2`)    
  
- Extensive documentation (including books üìö)     
  
- New! üêç‚ú® Shiny for python (It is still not ready for production apps)    

---

## Why Dash? üêç

- It is a stable and well documented solution for Python apps.
- It is more similar to Shiny than other technologies.


::: footer
[Data-Science Reactivity: Three Ways - Ian Lyttle](https://ijlyttle.github.io/reactivity-three-ways-quarto/)
:::

---

![](img/shiny_grande.jpg)



---

## What is a Shiny app?

A Shiny app is a web page (UI) connected to a computer running a live R session (Server)

![](img/basic-shiny.png){fig-align="center"}

---


## Main components of a Shiny App:

1. User interface (frontend)
2. Server (backend)
3. `shinyApp()`

---

## DEMO: Running a dashboard vs running code {background-color="#F1FFFA"}

![](img/run_app.png){width=100}



# Questions? Break! {background-color="#05A8AA"}




---

## `app.R` üìÑ

```r
library(shiny)
ui <- fluidPage(
  "Hello, world!"
) 
server <- function(input, output, session) {
}
shinyApp(ui, server)

```

---

## Main components of a Shiny App:

**1. User interface (frontend)**
Nested R functions that assemble an HTML user interface for your app

. . . 

**2. Server (backend)**
A function with instructions on how to build and rebuild the R objects displayed in the UI

. . . 

**3. `shinyApp()`**
combines ui and server into a functioning app. Wrap with `runApp()` if calling from a sourced script or inside a function



---

## Shiny App cheat-sheet

![](img/shiny.png){fig-align="center"}

:::footer
[Shiny cheatsheet](https://shiny.rstudio.com/images/shiny-cheatsheet.pdf)
:::



# DEMO: Building the structure of your first Shiny app {background-color="#F1FFFA"}






# What is **reactive programming** and how to implement it? {background-color="#F1FFFA"}




---

## Interactivity 
In computer science, interactive refers to **software which accepts and responds to input from people**, for example, data or commands.


```{r echo=FALSE, message=FALSE, warning=FALSE, out.height=400, out.width=500, fig.align='center'}
library(palmerpenguins)
library(plotly)
ggpenguins <- qplot(bill_length_mm , body_mass_g, 
data = palmerpenguins::penguins, color = species)
ggplotly(ggpenguins)
```

::: footer
Source: Wikipedia
:::



# Is the same to say reactive than interactive? 
No necessarily...

---

## Interactive plots
For example, an Altair plot

* It is **not required that we code a connection to a server**, this kind of interactivity is provided by the plotting library 

* It is not always needed **a widget** (for example, a slider)


---

## Reactive programming


* We need to add **widgets** to allow the user interact with the app and send a message to the server

* We have to üîå **connect** the user interface to the server.

* For that, we need to use a specialized dashboard library (for example, `Shiny` or `Dash`)


---

## Reactivity

"users change **input controls** (dragging sliders, typing in textboxes, checking checkboxes, ‚Ä¶) which causes logic to run **on the server** (reading CSVs, subsetting data, fitting models, ‚Ä¶)" 

![](img/basic-input-shiny.png){width=300 fig-align="center"}
::: footer
Source: [Mastering Shiny](https://mastering-shiny.org/)
:::

---


..."ultimately resulting in **outputs updating** (plots redrawing, tables updating, ‚Ä¶)."

![](img/basic-output-shiny.png){width=200 fig-align="center"}


::: footer
Source: [Mastering Shiny](https://mastering-shiny.org/)
:::

---

## What do we need to create a reactive app?

- Input functions `*Input()`
- Output functions (x2)
   - `render*()`
   - `*Output()`
   
---

## Input functions (~widgets)
Collects values from the user

![](img/inputs.png){fig-align="center"}

---

## Outputs
`render*()` and `*Output()` functions work together to add R output to the UI

![](img/outputs.png){fig-align="center"}

::: footer
You can check the Shiny cheat-sheet
:::


# Now, let's connect the UI and the Server üîå

---

## Reactivity

![](img/react-1.png)
---

## Reactivity üîå

![](img/basic-shiny.png){width=300 fig-align="center"}
---

## Reactivity: User selection to server üîå

![](img/basic-input-shiny.png){width=300 fig-align="center"}
---

## Reactivity: User selection to server üîå

![](img/react-2.png){fig-align="center"}
---

## Reactivity: User selection to server üîå

![](img/react-3.png){fig-align="center"}
---


## Reactivity: output to UI üîå

![](img/basic-output-shiny.png){width=300 fig-align="center"}


---

## Reactivity: output to UI üîå

![](img/react-4.png){fig-align="center"}
---

## Reactivity: output to UI üîå

![](img/react-5.png){fig-align="center"}
---

## Reactivity: output to UI üîå

![](img/basic-shiny-connected.png){width=300 fig-align="center"}

---

## Can you recognize the üîå in other app?

![](img/react-6.png){fig-align="center"}

---

# DEMO: Creating a reactive plot with Shiny {background-color="#F1FFFA"}


---

## The app has a üêõ. Can you help me to fix it?

![](img/exercise1.png)

---



## Learning objectives {background-color="#FED9B7"}


1. Define what is a dashboard.

2. Differentiate reactivity and interactivity.

3. Identify the **server** and the **user interface** as the core elements that compose a dashboard.

4. Implement the **reactivity** connecting the server and the user interface using specific functions.

5. Create and run a basic Shiny R app.


---

# Questions?


---


## Activity

Read this blogpost and comment with your teammates if there is something you can improve from yours.
https://www.geckoboard.com/best-practice/dashboard-design/



This is other interesting [post](https://www.geckoboard.com/blog/are-dashboards-really-dead/)

---

---

## `reactlog` package

1 - Add the function `reactlog_enable()`
2 - Once app has closed, display reactlog from shiny
`shiny::reactlogShow()`

