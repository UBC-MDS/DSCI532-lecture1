---
title: "L1 - Intro to DSCI 532 + Your first Shiny app"
institute: "Data Visualization II - DSCI 532 - MDS 2022/23"
format:
  revealjs:
    logo: img/mdslogo.png
    incremental: true  # bullets one by one 
    smaller: true
    scrollable: true
    theme: custom.scss
    slide-number: true
    show-slide-number: print
    chalkboard: true
    multiplex: true
---

## Lecture 1 
  

1. What is a **data dashboard**?    
  
2. **What is a Shiny App** and how can we build one?  
  
3. What is **reactive programming**?


---
  
## 🙌 **Today's goal**
### Create and Deploy a basic Shiny App.

  
This class is based in the book Mastering Shiny:
  
- 📚 Chapter 1 - [Your first Shiny app](https://mastering-shiny.org/basic-app.html) 
  
- 📚 Chapter 3, section 2: [Basic reactivity - The server function](https://mastering-shiny.org/basic-reactivity.html#the-server-function) 
  
  
This information is also available in the [L1 Lecture notes](https://pages.github.ubc.ca/MDS-2022-23/DSCI_532_viz-2_students/materials/lectures/1-intro-to-dashboards.html)  

# 1. What is a **data dashboard**? {background-color="#F1FFFA"}


---

## Which one is a dashboard?

::: {#fig-dashboards layout-ncol=2 fig-align='center'}

![](img/dashboard1.png){#fig-A width=500}

![](img/dashboard2.png){#fig-B width=500}

Are both dashboards?
:::

:::footer
[Dahsboard 1](https://experience.arcgis.com/experience/a6f23959a8b14bfa989e3cda29297ded) - [Dashboard 2](https://www.structube.com/en_ca/lighting/floor-lamps?page=1&sort-by=position-asc&price%5Bfilter%5D=175-385%2C175_385)
:::


---

## What is a data dashboard?

"An **information management tool** that visually tracks, analyzes, and displays key performance indicators, metrics, as well as key data points, allowing you to monitor the current state of your business, department, team, or specific process"  
 
![](img/example.png){fig-align="center"}


::: footer
[Source: Databox](https://databox.com/what-is-a-dashboard#what) - [Example dashboard AdminLTE 3](https://adminlte.io/themes/v3/)
:::


---

## Are dashboards data visualizations?

- **Data visualization** is a way of presenting data in a visual form to make it easier to understand and analyze.

```{r ggplot, fig.align='center', out.width=400}
library(ggplot2)

set.seed(1)
df <- data.frame(
  gp = factor(rep(letters[1:3], each = 10)),
  y = rnorm(30)
)

ds <- do.call(rbind, lapply(split(df, df$gp), function(d) {
  data.frame(mean = mean(d$y), sd = sd(d$y), gp = d$gp)
}))


ggplot() +
  geom_point(data = df, aes(gp, y)) +
  geom_point(data = ds, aes(gp, mean), colour = 'red', size = 3) +
  geom_errorbar(
    data = ds,
    aes(gp, mean, ymin = mean - sd, ymax = mean + sd),
    colour = 'red',
    width = 0.4
  )

```



::: footer
[Extracted from Tableau](https://www.tableau.com/learn/articles/dashboards/what-is) 
:::

---

## Are dashboards data visualizations?

- **Data dashboards are a summary one or more datasets, presented in a way that makes the information easier to understand**. 
- Dashboards are a type of data visualization, and often use common visualization tools such as graphs, charts, and maps. 

![](img/example.png){fig-align='center'}

::: footer
[Extracted from Tableau](https://www.tableau.com/learn/articles/dashboards/what-is) 
:::

---

## Dashboards...

- ... make results easier to understand to **non-technical people can more easily read and interpret it**.

- ... uses **interactive elements** to help exploring and understand certain points, explore areas of interest, and help taking **data-driven decisions**.




::: footer
[Extracted from Tableau](https://www.tableau.com/learn/articles/dashboards/what-is) 
:::

---

## Packages / technologies used to create Dashboads

![](img/tech.png)

---

## Criteria to select the best available technology
1. cost / financial aspect
2. data architecture - Is compatible with other technology that I am using?
3. Ease of use

::: footer
Extracted from: Business Dashboards
:::

---

## Criteria to select the best available technology
4. Software maturity
5. Features and flexibility
6. Hardware requirements

::: footer
Extracted from: Business Dashboards
:::


---

## What will we learn in DSCI 532?

- **[R]** Shiny  
- **[Python]** Dash

Both are open source packages  


::: footer
New! [Shiny for python](https://shiny.rstudio.com/py/)
:::


---

## Why Shiny? ✨

  
- **Mature web app framework** Special packages for testing the app (`Shinytest2`)    
  
- Extensive **documentation** (books 📚)  

- It has a learning curve but allows **more customization** than other technologies (i.e. Tableau)
  
- New! 🐍✨ Shiny for python (It is not ready for production apps)    

:::{.fragment .highlight-red}
- Requested by Capstone partners
:::

---

## Streamlit vs. Dash vs. Shiny ...

![](img/dashboard-comparison.png){fig-align="center"}

::: footer
[Streamlit vs. Dash vs. Shiny vs. Voila vs. Flask vs. Jupyter - by Markus Schmitt](https://www.datarevenue.com/en-blog/data-dashboarding-streamlit-vs-dash-vs-shiny-vs-voila)
:::

---

## Why Dash? 🐍

- It is a stable and well documented solution for Python apps.
- It is more similar to Shiny than other technologies.


::: footer
[Data-Science Reactivity: Three Ways - Ian Lyttle](https://ijlyttle.github.io/reactivity-three-ways-quarto/)
:::

---

## What about Tableau and Power BI?

![](img/tableau-1.png){width=500 fig-align="center"} 

- **Drag and drop** GUI interface (not coding!)
- Easier to implement but allows **less customization**
- **$**


::: footer
[Power BI vs Shiny - Appsilon blog](https://appsilon.com/powerbi-vs-r-shiny/)
:::

---

### Extra material: 
- [MDS Tableau Tutorial](https://hfboyce.github.io/tableau_course/intro.html)

- Comparison among technologies: blogposts
    - [Dash vs Shiny - Appsilon](https://appsilon.com/dash-vs-shiny/)
    - [Tableau vs Shiny- Appsilon](https://appsilon.com/tableau-vs-r-shiny/)
    - [Streamlit vs Dash vs Shiny Voila](https://www.datarevenue.com/en-blog/data-dashboarding-streamlit-vs-dash-vs-shiny-vs-voila)

---


## DSCI 532 Overview    
#### Group-based project course 
  
- **Main project** Create a Shiny app
    - 4 Milestones + team work contract + team work reflection  

- **Vocabulary** Warm-up activity!
      
- **Individual Assignment**: Dash Python app

---

## DSCI 532 Overview    

![](img/532-overview-2023.png){fig-align="center" width=300}



# Questions?

---

![](img/shiny_grande.jpg)

# 2. What is a Shiny App and how can we build one?  {background-color="#F1FFFA"}



---

## What is a Shiny app?

A Shiny app is a web page (UI) connected to a computer running a live R session (Server)

![](img/basic-shiny.png){.r-stretch fig-align='center'}

---

## Main components of a Shiny App:

1. User interface (frontend)
2. Server (backend)
3. `shinyApp()`


---

  
# DEMO: Basic structure of a Shiny app {background-color="#F1FFFA"}
  
 






# Questions? Break! {background-color="#05A8AA"}




---

## `app.R` 📄

```r
library(shiny)
ui <- fluidPage(
  "Hello, world!"
) 
server <- function(input, output, session) {
}
shinyApp(ui, server)

```

---

## Main components of a Shiny App:

**1. User interface (frontend)**
Nested R functions that assemble an HTML user interface for your app

. . . 

**2. Server (backend)**
a function with instructions on how to build and rebuild the R objects displayed in the UI

. . . 

**3. `shinyApp()`**
combines ui and server into a functioning app.






# 3. What is **reactive programming**? {background-color="#F1FFFA"}




---

## Interactivity 
In computer science, interactive refers to **software which accepts and responds to input from people**, for example, data or commands.


```{r echo=FALSE, message=FALSE, warning=FALSE, out.height=400, out.width=500, fig.align='center'}
library(palmerpenguins)
library(plotly)
ggpenguins <- qplot(bill_length_mm , body_mass_g, 
data = palmerpenguins::penguins, color = species)
ggplotly(ggpenguins)
```

::: footer
Source: Wikipedia
:::



# Is the same to say reactive than interactive? 
No necessarily...

---

## Interactive plots
For example, an Altair plot

* It is **not required that we code a connection to a server**, this kind of interactivity is provided by the plotting library 

* It is not always needed **a widget** (for example, a slider)

<input type="range" min="1" max="100" value="50" class="slider" id="myRange">

---

## Reactive programming


* We need to add **widgets** to allow the user interact with the app and send a message to the server

* We have to 🔌 **connect** the user interface to the server.

* For that, we need to use a specialized dashboard library (for example, `Shiny` or `Dash`)


---

## Reactivity

"users change **input controls** (dragging sliders, typing in textboxes, checking checkboxes, …) which causes logic to run **on the server** (reading CSVs, subsetting data, fitting models, …)" 

![](img/basic-input-shiny.png){width=300 fig-align="center"}

:::footer
Source: [Mastering Shiny](https://mastering-shiny.org/)
:::

---


..."ultimately resulting in **outputs updating** (plots redrawing, tables updating, …)."


![](img/basic-output-shiny.png){width=300 fig-align="center"}


::: footer
Source: [Mastering Shiny](https://mastering-shiny.org/)
:::

---

## Functions needed for reactivity

- Input functions 
   - `*Input()`
- Output functions (x2)
   - `render*()`
   - `*Output()`
   
---

## Input functions (~widgets)
Collects values from the user

![](img/inputs.png){width=700 fig-align="center"}

:::footer
[Active Widgets](https://shiny.rstudio.com/tutorial/written-tutorial/lesson3/)
:::
---

## Outputs
`render*()` and `*Output()` functions work together to add R output to the UI

![](img/outputs.png){width=400 fig-align="center"}

::: footer
You can check the Shiny cheat-sheet
:::


---

## Shiny App cheat-sheet

![](img/shiny.png){.r-size fig-align="center"}

:::footer
[Shiny cheatsheet](https://shiny.rstudio.com/images/shiny-cheatsheet.pdf)
:::

# Now, let's connect the UI and the Server 🔌

---

## User interface (UI)

![](img/react-1.png){.r-stretch}



# DEMO: Creating a reactive plot with Shiny {background-color="#F1FFFA"}


---

## Reactivity 🔌

![](img/basic-shiny.png){width=300 fig-align="center"}

- User selection -> server
- Output -> UI
---

## Reactivity: User selection -> server 🔌

![](img/basic-input-shiny.png){width=300 fig-align="center"}


---

## Reactivity: User selection -> server 🔌

![](img/react-2.png){.r-stretch fig-align="center"}
---

## Reactivity: User selection -> server 🔌

![](img/react-3.png){.r-stretch fig-align="center"}
---


## Reactivity: Output -> UI 🔌

![](img/basic-output-shiny.png){width=300 fig-align="center"}


---

## Reactivity: Output -> UI 🔌

![](img/react-4.png){.r-stretch fig-align="center"}
---

## Reactivity: Output -> UI 🔌

![](img/react-5.png){width=300 fig-align="center"}
---

## Reactivity: Output -> UI 🔌

![](img/basic-shiny-connected.png){width=300 fig-align="center"}

---

## Can you recognize the 🔌 in other app?

![](img/react-6.png){fig-align="center"}

---

## Deployment with `shinyapps.io`

- Create an account
- You have until 5 apps for free.


**We are going to learn other deployment methods in lecture 7**


---

## The app has a 🐛. Can you help me to fix it?

![](img/exercise1.png){.r-stretch}

---



## Learning objectives {background-color="#FED9B7"}

1. Define what is a data dashboard.

2. Identify the **server** and the **user interface** as dashboard core elements.

3. Implement **reactive programming** in a Shiny app. 

4. Create and deploy a basic Shiny R app.




# Questions?  {background-color="#05A8AA"}


---


